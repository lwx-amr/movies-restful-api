version: '3.9'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${APP_CONTAINER_NAME}
    ports:
      - "${APP_PORT}:${APP_INTERNAL_PORT}"
    env_file:
      - .env
    environment:
      - DB_HOST=db
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    command: sh -c "wait-for-it db:5432 -- npm run migration:run && npm start"
    networks:
      - app-network

  db:
    image: postgres:15-alpine
    container_name: ${DB_CONTAINER_NAME}
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:alpine
    container_name: ${REDIS_CONTAINER_NAME}
    ports:
      - "${REDIS_PORT}:${REDIS_INTERNAL_PORT}"
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: